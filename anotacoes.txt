Repositório do curso: https://github.com/cursodsousa/curso-spring-boot-especialista

------------------------------------------------------------------------------------------------------------------------
                                    Trabalhando com SPRING DATA JPA
------------------------------------------------------------------------------------------------------------------------
1.  Criar um projeto Maven e adicionar o parent, dependencies e build necessários
2.  Como vamos trabalhar com um banco em memória (H2), adicioar a dependência
    Ex.:
    <dependency>
        <groupId>com.h2database</groupId>
        <artifactId>h2</artifactId>
    </dependency>
3.  Em seguida, em application.properties, colocar as configurações para conexão com o BD. Apesar de ser um BD em memória,
    o processo é o mesmo para qualquer BD. Vide configuração no arquivo.
4.  Como o H2 é um banco em memória, o SB fornece uma opção para rodar um script sql ao carregar o banco e montar toda a
    estrutura de dados necessária.
    4.1.  Dentro de resources, criar um arquivo data.sql com o script sql desejado (ex. create table)
5.  Tendo o banco configurado e o script p/ criar as minhas tabelas, vou criar as classes de entidade correspondentes
    as tabelas. Ver domain.entity: Cliente, Produto, Pedido e ItemPedido
6.  Trabalhando com DAO (Data Access Object) - SEM JPA - Repository renomeado p/ ClientesJdbc
    6.1.  Dentro do meu domain, criar uma package repository e em seguida a classe desejada
    6.2.  Anotar a classe como @Repository, para que o SB leia e carregue corretamente no container
        6.2.1.  Ao anotar com @Repository, além de carregar no container, o SB vai traduzir as exceções de BD e trazê-las
                "bonitinhas" para o java
    6.3.  Criar o método para salvar os dados. Como não estamos utilizando JPA (ainda), vou utilizar uma classe JdbcTemplate
          que vai me auxiliar na persistencia dos dados na base.
        6.3.1.  No meu método, colocar a chamada do .update()
                Ex.:
                jdbcTemplate.update(INSERT, new Object[]{cliente.getNome()});
    6.4.  Para poder testar, como ainda não temos uma API, vou criar um CommandLineRunner p/ executar o método criado em Clientes
    6.5.  Para poder fazer uma query, preciso criar os construtores (padrão e com parâmetros) na classe que eu quero fazer a query,
          neste caso foi a classe Cliente. Isto pq vou pegar o resultSet do meu RowMapper e criar uma nova instancia de Cliente,
          passando os campos mapeados.
    DICA! Quando percebemos que estamos reutilizando alguma coisa, usar Extract Method do IntelliJ e transformá-lo em um método
          separado, como o exemplo do: obterClienteMapper()
    RESUMO: Para trabalhar com jdbcTemplate e fazer um CRUD. Preciso adicionar a dependência ao meu POM, depois no meu repository
            chamar os métodos update(), passando o statement e um objeto new Object[]{...}) ou query(), passando o statement e um
            RowMapper(), para fazer o mapeamento do retorno da query e atribuir a classe.
7.  Trabalhando com DAO (Data Access Object) - COM JPA
    7.1.  Para trabalhar com JPA, a primeira coisa que devemos fazer é adicionar as anotações @Entity e @Table nas classes de entidades
          Isso fará com que o SB escaneie esta classe e coloque no container como uma entidade
    7.2.  Em seguida, adicionar as anotações nas colunas: @Id e @GeneratedValue nas colunas PK e @Column em todas as demais
          O pacote é o javax.persistence import javax.persistence.*;
    7.3.  Quando trabalhamos com JPA, uma vez que informamos quais são as entidades, o próprio já cria as tabelas no H2
          e desta forma não necessitamos do arquivo resources/data.sql com o script de criação de tabelas.
          Para evitar conflitos, o arquivo foi renomeado para desativado_data.sql
    7.4.  No meu Repository, fazer a injeção do EntityManager @Autowired private EntityManager entityManager;
    7.5.  Nos métodos, fazer a anotação @Transactional. É uma necessidade do EntityManager. Importante, precisa ser do pacote: import org.springframework.transaction.annotation.Transactional;
    DICA! Usando o readOnly a pesquisa fica mais rápida pq o JPA não faz cache: @Transactional(readOnly = true)
    7.6.  Utilizar o EntityManager para fazer as operações de persist(), merge(), remove(), find() e createQuery()
        7.6.1.  Quando for uma operação de createQuery, preciso montar o JPQL. Caso precise passar parâmetros, preciso criar uma query tipada
                Exemplos no arquivo Clientes.java
        7.6.2.  Cuidado com as transações transientes. As vezes ao tentar fazer uma operação de delete, a instancia pode estar transiente. Se isso ocorrer, fazer o merge antes
                conforme exemplo na classe Clientes e no método deletar
8.  Trabalhando com o JpaRepository - MELHOR IMPLEMENTAÇÃO
    8.1.  A classe Clientes foi refatorada para se tornar um JpaRepository
    8.2.  Para implementarmos, NÃO DEVEMOS ter a anotação @Repository
    8.3.  Além disso a CLASS tem que virar uma INTERFACE e extender o JpaRepository
        8.3.1.  JpaRepository recebe 2 parâmetros. 1 -> A Entidade; 2 -> O Tipo de dado do ID da entidade
                Ex.:
                public interface Clientes extends JpaRepository<Cliente, Integer> { }
    8.4.  O JpaRepository já tem dentro dele (encapsulado) o EntityManager. É por isso que na implementação não usamos explicitamente o EM
    8.5.  Outras coisas que o JpaRepository já tem encapsulado são os métodos para salvar, obterTodos, etc. Desta forma,
          eu não preciso escrever uma linha de código dentro da interface. Eu simplesmente chamo estes métodos dentro da
          classe ou service que está importando esta interface que extende o JpaRepository
          Ex.: save(); findAll(); delete();
        8.5.1.  IMPORTANTE! Para poder usar o save() e o delete() eu precisei adicionar a dependência do maven CrudRepository.
                Isto porque o JpaRepository extends PagingAndSortingRepository que extends CrudRepository.
        8.5.2.  Alguns métodos mais elaborados como findByNomeLike, precisam ser implementado. Eles são chamados de Query Methods
9.  Query Methods. São métodos que se transformam em uma query. A declaração do nome do método deve respeitar uma certa convenção
    9.1.  Utilizando uma convenção de nome, posso informar no meu método os parâmetros que quero usar para que o Jpa transforme
          o meu método em uma query e assim eu não precise escrever um JPQL.
          Os parâmetros precisam ser passados na ordem que são declarados no nome do método
          Ex.:
          List<Cliente> findByNomeOrId(String nome, Integer id);
          List<Cliente> findByNomeOrIdOrderById(String nome, Integer id);
          Cliente findOneByCpfOrCnpj(String cpf, String cnpj);
    9.2.  Mais informações: https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods
10. @Query. Com esta anotação eu posso escrever querys mais complexas. É a maneira de consultar mais indicada pela documentação de
    referencia do SB.
    10.1. Basta informar a Query que eu desejo, no formato JPQL ou SQL (vide dica a seguir) e passar os parametros.
    DICA! Caso eu queira montar uma query nativa, ao invés de um JPQL em um @Query, eu posso setar o flag para true, conforme exemplo
          EX.:
          public interface UserRepository extends JpaRepository<User, Long> {
            @Query(value = "SELECT * FROM USERS WHERE EMAIL_ADDRESS = :emailAddress", nativeQuery = true)
            User findByEmailAddress(@Param("emailAddress") String emailAddress);
          }
    10.2. Também posso utilizar o @Query p/ fazer modificações como um delete por exemplo. Para isso preciso adicionar a anotação @Modifying
11. Para exibir o SQL que está sendo gerado/executado pelo Hibernate(JPA) devemos fazer o setup no arquivo de configuração
    application.properties. Vide arquivo.
    Ex.:
    spring.jpa.properties.hibernate.show_sql=true
    spring.jpa.properties.hibernate.format_sql=true
12. Mapeamentos
    12.1. @ManyToOne: Normalmente p/ mapear uma FK. Usando no relacionamento muitos p/ um. Informar também o @JoinColumn
        12.1.1. No @JoinColumn, informar o name da coluna de FK da entidade que estou mapeando (da minha entidade many).
                Ex.:
                @JoinColumn(name = "cliente_id")
    12.2. @OneToMany: Este mapeamento trará uma lista de itens (aqui no caso pedidos) para a entidade (Cliente)
        12.2.1. Informar o mappedBy, que é o nome da propriedade que foi criada na entidade "many" que leva a FK
                da minha entidade atual.
                Ex.:
                Na entidade many, eu tenho a FK criada para a minha entidade "one"
                private Cliente cliente;
                Então na minha entidade "one" eu preciso colocar este nome da propriedade
                @OneToMany(mappedBy = "cliente")
                private Set<Pedido> pedidos;
        DICA! Usei Set, mas poderia usar List ou Collection. O Set garante que não terei pedidos repetidos na lista + indicado
        12.2.2. Após criar o mapeamento, adicionar o getPedidos para este atributo
                Ex.:
                public Set<Pedido> getPedidos() {
                    return pedidos;
                }
        DICA! De preferencia a LocalDate ao invés de Date e/ou Calendar. O LocalDate é mais simples de trabalhar
              Ex.:
              Pegando a data: LocalDate.now()
              Pegando a data/hora LocalDateTime.now()
13. Criar os repositorys: Produtos, Pedidos e ItensPedido. A implementação é padrão, apenas conforme ex. abaixo
    Ex.:
    public interface ItensPedido extends JpaRepository<ItemPedido, Integer> { }
14. Fazendo consultas com relacionamento JPA
    14.1. Com @Query. Posso criar um método dentro do meu repository.
        14.1.1. Posso fazer a query usando JPQL
        14.1.2. Como a entidade já está mapeada, não preciso fazer os joins, apenas colocar o fetch, conforme exemplo
                Ex.: Veja que eu só coloco FETCH e o c.pedidos (que é como eu mapeei na entidade Cliente: private Set<Pedido> pedidos;)
                @Query("SELECT c FROM Cliente c LEFT JOIN FETCH c.pedidos WHERE c.id = :id")
                Cliente findClienteFetchPedidos(@Param("id") Integer id);
------------------------------------------------------------------------------------------------------------------------
                                    DESENVOLVIMENTO DE UMA API RESTFUL
------------------------------------------------------------------------------------------------------------------------
15. Criação da @Controller
    15.1. Adicionar a dependência do spring-boot-starter-web (se necessário)
    15.2. Criar uma classe Controller dentro de /rest/controller
    15.3. Anotar a classe como @Controller
    15.4. Definir uma URL base para a API é uma boa prática. Antes do nome da classe usar @RequestMapping("/api/clientes")
        15.4.1. Este valor é opcional. Posso definí-lo diretamente em cima dos métodos da controller
    15.5. Injetar os repositorys ou services na controller
        15.5.1. Aqui foi criado um construtor p/ fazer a injeção, mas na SOMOS não usamos isso. Pois podemos usar o Lombok
                e então a anotação @RequiredArgsConstructor
    15.6. Criando um método GET: @GetMapping
        15.6.1. No método colocar a anotação @GetMapping("consulta-cliente-id/{id}"), seguida do path, com ou sem parâmetros,
                para identificar qué será operação HTTP de GET
            15.6.1.1. Por convenção utilizamos o parâmetro da url com o mesmo alias na @PathVariable
        15.6.2. Em seguida, adicionar @ResponseBody (Se usarmos @RestController ao invés de @Controller não precisamos disso)
            15.6.2.1. Na SOMOS não utilizamos esta anotação. Verificar se é necessário mesmo
        15.6.3. O retorno do meu método DEVE ser um ResponseEntity<T>
        15.6.4. Dentro do método, chamar o repository (ou service) que foi injetado na controller
        15.6.5. No return, quando sucesso e quiser retornar um 200, retornar: ResponseEntity.ok(cliente.get());
                Quando não encontrado, retornar um 404, retornar: ResponseEntity.notFound().build();
            15.6.5.1. cliente.get() para obter o cliente que está dentro do Optional<T>
            15.6.5.2. O ResponseEntity é a resposta que retorno na API. Ele pode ser o Header + Body ou só o Body. ele é
                      muito versátil e posso formatá-lo usando um construtor (nova instancia de ResponseEntity) para voltar
                      o que eu quiser na API.
        15.6.6. Criar um CommandLineRunner para criar e salvar um cliente no H2
        DICA! Como o meu JSON está retornado a lista de pedidos vinculada ao cliente (devido ao mapeamento @OneToMay da entidade)
              Ex.:
              {
                  "id": 2,
                  "nome": "Cicrano",
                  "pedidos": []
              }
              Eu posso colocar uma anotação @JsonIgnore em cima da propriedade mapeada que retorna a lista
              Ex.:
              @JsonIgnore // Para que o meu JSON não retorne a lista de pedidos
              @OneToMany(mappedBy = "cliente")
              private Set<Pedido> pedidos;
    15.7. Criando um método POST: @PostMapping
        15.7.1. No método colocar a anotação @PostMapping("salvar-cliente") seguida do path
        15.7.2. Assim como no GET, colocar o @ResponseBody para que o objeto retornado pelo controller seja automaticamente
                serializado em JSON
        15.7.3. Na assinatura do método, preciso colocar um @RequestBody, para que mapear o HttpRequest e "desserializar"
                o body do HttpRequest em um objeto Java. O Spring automaticamente transforma o JSON em objeto Java usando
                esta anotação
    15.8. Criando um método DELETE: @DeleteMapping
        15.8.1. O @DeleteMapping é igual ao @GetMapping. Preciso informar o path, o parâmetro, o @ResponseBody, etc
        15.8.2. Normalmente quando fazemos a deleção retornamos um: ResponseEntity.noContent().build(), que é um retorno 204 de sucesso
                mas que não retorna nenhum conteúdo, afinal fiz uma exclusão.
    15.9. Criando um método PUT: @PutMapping
        15.9.1. O @PutMapping é indicado para quando vamos fazer uma atualização INTEGRAL dos dados (comparar com @PatchMapping)
                ou seja, os parâmetros não informados serão transformados em nulo.
        15.9.2. Na assinatura do método que vou usar o put, utilizamos 2 parâmetros de entrada. O ID que eu quero atualizar
                e o @RequestBody, que é onde eu recebo os dados
        15.9.3. Neste método eu faço a consulta pelo findById() e salvo usando o .save()
            15.9.3.1. O uso do Optional<T> permite que eu encadeie chamadas, como o .map() por exemplo. Neste .map() posso usar uma
                      lambda p/ setar o id e salvar o cliente no H2 e ainda dar o retorno .noContent()
            DICA! Ao invés de setar atributo por atributo, posso usar o .setId() que ele automaticamente seta todas as propriedades
            15.9.3.2. Para finalizar o uso do .map(), uso o .orElseGet(). O método .orElseGet() recebe um suplier.
                      O suplier é um interface funcional que não recebe parâmetros e retorna qualquer coisa
    15.10.Utilizando o Example e ExampleMatcher
        15.10.1.Este métodos permitem que eu faça consultas dinâmicas sem criá-las no repository
        15.10.2.Faço a denifição do ExampleMatcher, que é a estratégia da pesquisa e o Example recebe o filtro + matcher
                Ex.:
                ExampleMatcher matcher = ExampleMatcher.matching().withIgnoreCase().withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING);
                Example example = Example.of(filtro, matcher);
                return ResponseEntity.ok(clientes.findAll(example));
16. Refaturando a ClienteController em ClienteRestController
    16.1. Ao invés de usar o @Controller é melhor usar a @RestController, pois essa dispensa o uso da @ResponseBody,
          pois essa anotação já tem @Controller e @ResponseBody
    16.2. Outra coisa que foi refatorada no código foi a remoção do ResponseEntity, desta forma foram necessários adicionar a anotação
          @ResponseStatus() em cima do método, passando o HttpStatus de acordo com a resposta desejada.
          Obs. Se eu não informar nada, ele vai voltar 200 para sucesso
          Ex.:
          @ResponseStatus(HttpStatus.CREATED) // volta 201
          @ResponseStatus(HttpStatus.NOT_FOUND) // volta 404
    16.3. Para dar o retorno correto quando houver um erro, usar orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Cliente não encontrado"));
    DICA! Para que seja exibida a mensagem contida em ResponseStatusException é necessário adicionar ao application.properties: server.error.include-message=always
17. Para a ProdutoRestController, foram feitas a criação dos endpoints na mesma estrutura do que foi criado p/ ClienteRestController
18. PedidoRestController. Para implementar este controller, teremos que trabalhar com services, pois teremos mais regras de negócio e
    usaremos multiplos repositorys
    18.1. Diferente de ProdutosRestController e ClientesRestController, aqui vamos implementar a boa e indicada prática de criar uma
          interface Service. Portanto, criar a package service e a interface PedidoService.
          18.1.1. O service é indicado pq colocamos as regras de negócio nos services e geralmente utilizamos vários repositorys nele
    18.2. Criar PedidoRestController e fazer as anotações básicas e injetar a interface PedidoService
    18.3. Criar a package impl e o PedidoServiceImpl e anotá-lo como @Service. É uma boa prática e facilita os testes quando fazemos uma
          classe que implementa um service do tipo interface
        18.3.1. Na declaração da classe, dizer que ela "implements PedidoService"
        18.3.2. Fazer a injeção do repository PedidosRepository dentro do Service criando seu construtor
19. Trabalhando com DTO
    19.1. Vamos criar um DTO para atender ao JSON de pedidos, conforme o modelo:
          {
            "cliente": 1,
            "total": 100,
            "items": [
              {
                "produto": 1,
                "quantidade": 10
              }
            ]
          }
    19.2. Na package rest/dto criar as classes PedidoDTO e ItemPedidoDTO
        19.2. Nestas classes, fazer o mapeamento das propriedades, conforme definido no JSON
    DICA! Para não precisar criar manualmente os getters e setters, vamos utilizar o projeto LOMBOK
20. Configuração do LOMBOK
    20.1. Adicionar a dependência do Lombok no pom.xml https://projectlombok.org/setup/maven, REMOVENDO A VERSÃO para deixar
          que o SB gerencie isso
    20.2. Caso não tenha, instalar o plugin do Lombok na IDE
    20.3. Algumas anotações do lombok importantes, que irão suprimir a necessidade de criar getters, setters, construtores, etc
          Ex.:
          @Getter
          @Setter
          @ToString
          @EqualsAndHashCode
          @NoArgsConstructor // Construtor sem argumentos
          @AllArgsConstructor // Construtor com argumentos
          @Data // É um compilado que já tem @Getter, @Setter, @RequiredArgsConstructor, @ToString e @EqualsAndHashCode
    20.4. Eu precisei adicionar o Lombok ao meu classpath para poder reconhecer as anotações
21. Implementando a PedidoRestController
    21.1. Na controller, criar o método post para salvar os clientes. Este método não tem regra de negócio, ele apenas
          chama o PedidosService (interface), que tem um método NÃO IMPLEMENTADO de salvar
    21.2. Como a classe PedidoServiceImpl, implementa PedidoService, precisamos, obviamente implementar o método nesta classe
        21.2.1. Este método recebe um DTO portanto eu preciso pegar os dados do dto e transferí-los para a entidade de pedidos
        DICA! Para evitar o uso de construtores, vamos usar a anotação @RequiredArgsConstructor do Lombok e definir as
              propriedades como final. Assim o Lombok faz a gestão da construção para nós
        21.2.2. Algumas propriedades de Pedido podem ser "setadas" facilmente, dando um get no DTO
                Ex.:
                pedido.setTotal(dto.getTotal());
                Porém outras precisam voltar OBJETOS e no DTO só temos o ID deles. Então o que devemos fazer é:
            21.2.2.1. Trazer TODOS os repositorys que vamos utilizar no service para que possamos utilizar o findById()
                      deste repository
            21.2.2.2. Como o ID pode ser inválido vamos criar uma package e classe para tratar as exceções personalizadas.
                      Criar a classe exception/RegrasNegocioException, extendendo RuntimeException e implementar o construtor do super
            21.2.2.3. Agora podemos voltar para a pesquisa por id e adicionar a chamada desta exception caso o ID não seja encontrado
            21.2.2.4. Criar um método para percorrer a lista de pedidos DTO, recuperar as entidades e setar os valores
                21.2.2.4.1. Para percorrer a lista precisamos utilizar o stream() e depois transformar em lista novamente
                            .collect(Collectors.toList())
            21.2.2.5. Utilizei @JsonIgnore no mapeamento da coluna do ItemPedido pois estava ficando em loop
            IMPORTANTE! Sempre usar a anotação @Transactional nos métodos que salvam dados no banco para garantir que só será salvo se tudo estiver OK no método
22. Implementando @ControllerAdvice e os ExceptionsHandlers para dar um retorno de erro apropriado
    22.1. Para que eu consiga dar um retorno de erros adequado eu preciso interceptar o erro e manipulá-lo para dar o retorno correto ao cliente
    22.2. O primeiro passo é ter uma classe, do tipo exception como a RegrasNegocioException. Esta classe será lançada quando
          eu desejar, ou melhor dizendo quando uma regra de negócio ou um dado falhar.
    22.3. Após implementar nos meus services a chamada para a classe, ex.: new RegrasNegocioException("ID do cliente não encontrado") eu preciso criar
          mais 2 classes para capturar esta esseção e manipulá-la.
    22.4. Primeiramente criamos a classe ApiErrors na package rest. Esta classe tem 1 propriedade que é a lista de erros e um construtor que vai
          instanciar as mensagens de erro
    22.5. Em seguida criar a classe ApplicationControllerAdvice em rest/controller e anotar com @RestControllerAdvice
        22.5.1. @RestControllerAdvice permite fazer o tratamento dos erros utilizando os exception handlers, que são métodos que capturam o
                erro e nos permitem fazer um tratamento e voltar uma mensagem de status correta para o nosso cliente
        22.5.2. Neste método informar a classe de exceção que será capturada @ExceptionHandler(RegrasNegocioException.class)
        22.5.3. Informar o tipo do retorno http @ResponseStatus(HttpStatus.BAD_REQUEST)
        22.5.4. E por fim criar o método que vai receber a exceção (capturada) e vai gerar uma nova instancia de ApiErrors
    DICA! Costumamos retornar BAD_REQUEST para erros de negócio/dados nas APIs
23. Para retornar um pedido em uma consulta é uma boa prática criar um DTO, pois assim só expomos o que o cliente pode acessar
    23.1. Criar os DTOs de InformacoesPedidoDTO e InformacoesItemPedidoDTO, e anotar com: @Data; @AllArgsConstructor; @NoArgsConstructor; @Builder
        23.1.1. O @Builder permite que façamos o set na classe DTO de forma mais fácil
                Ex.:
                return InformacoesPedidoDTO.builder()
                                .codigo(pedido.getId())
                                .dataPedido(pedido.getDataPedido().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")))
                                .cpf(pedido.getCliente().getCpf())
                                .build();
    23.2. Criar o método no service e no serviceImpl chamando o repository para fazer a @Query por id.
        23.2.1. Nos services, estou retornado uma entidade de Pedidos e não de DTO. A conversão será feita na controller
        23.2.2. Utilizamos o @Query pois temos um JOIN e não foi possível fazer com query method
    23.3. Na controller, chamar a service que foi injetada, usando o método p/ buscar o pedido e fazer a conversão de entidade
          para DTO
24. Adicionando um atributo a entidade Pedido do tipo enum
    24.1. Adicionar um novo atributo a entidade Pedido e como ele será um ENUM, marcá-lo com @Enumerated(EnumType.STRING)
        24.1.1. Usamos EnumType.STRING pois não definimos os ordinais e também pq a coluna satus é string
    24.2. Atualizar os DTOs desta entidade
    24.3. Na controller, na hora de transformar de Entidade para DTO, passar esse novo parâmetro
25. @PatchMapping para realizar o cancelamento de pedidos. Nós usamos o Patch quando queremos atualizar apenas alguns dados
    assim, diferentemente do Put, os atributos que não forem informados PERMANECERÃO como estão!
    25.1. Para receber o status foi criado um DTO (achei exagero pois é só um string)
    25.2. Criar o método que fará o update no pedido atualizarStatus e marcá-lo como @Transactional
        25.2.1. No método, fazer a pesquisa do pedido, usar .map() e chamar o .save()
        25.2.2. Caso o pedido não seja localizado e para voltar o erro corretinho, foi criada uma nova exception PedidoNaoEncontradoException
------------------------------------------------------------------------------------------------------------------------
                                    Utilizando BEAN VALIDATION
------------------------------------------------------------------------------------------------------------------------
26. O Bean Validation é um recurso do SB que nos permite validar os dados recebidos na API.
    IMPORTANTE! Note que estou validando a API, então vou colocar as validações nas entidades e/ou DTOs que são chamados
                pelos controllers. Vide o exemplo de Pedidos
    26.1. Adicionar o Starter Validation no POM
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-validation</artifactId>
            </dependency>
    26.2. Na entidade colocar a anotação desejada p/ validar o atributo. @NotEmpty(message = "O campo nome é obrigatório")
    26.3. No controller, adicionar a anotação @Valid no método que eu quero validar o atributo
    IMPORTANTE! O @Valid precisa estar antes do nome da Entidade que estou validando
          Ex.:
          @RequestBody @Valid Produto produto
    26.4. Para trazer a mensagem correta para o cliente preciso criar um método na AplicationControllerAdvice, conforme padrão abaixo
          Ex.:
          @ExceptionHandler(MethodArgumentNotValidException.class)
          @ResponseStatus(HttpStatus.BAD_REQUEST)
          public ApiErrors handleMethodNotValidException(MethodArgumentNotValidException exception) {
                List<String> erros = exception
                                        .getBindingResult()
                                        .getAllErrors()
                                        .stream()
                                        .map(erro -> erro.getDefaultMessage()).collect(Collectors.toList());
                return new ApiErrors(erros);
          }
    26.4. E na ApiErrors, criar o construtor que recebe a lista de erros
          Ex.:
          public ApiErrors(List<String> errors) {
               this.errors = errors;
          }
        26.4.1. Como eu retorno uma lista de validações, o JSON de retorno fica assim:
                "errors": [
                        "O campo nome é obrigatório",
                        "O CPF informado é inválido",
                        "O campo CPF é obrigatório"
                    ]
    DICA! Existem validações de @CPF e @CNPJ nativas no SB em org.hibernate.validator.constraints.br
    26.5. Criando anotação de validação customizada
        26.1. Criar as packages validation e dentro dela constraint
        26.2. Em validation criar uma classe do tipo annotation e codificá-la igual ao que foi feito em @NotEmptyList que foi baseado na @NotNull
        26.3. Como eu preciso apontar a @Constrait p/uma classe: @Constraint(validatedBy = NotEmptyListValidator.class), vou criar esta classe
        26.4. A classe (criada dentro de constraint) precisa implementar o ConstraintValidator, passando a anotation criada + o tipo do dado que precisa ser validado
        26.5. A validação em si (a regra de negócio que eu quero implementar) fica dentro do método implementado isValid()
    26.7. Internacionalização. Para que concentremos as mensagens em um só local devemos fazer o seguinte.
        26.7.1. Criar um arquivo messages.properties e definir o conjunto chave/valor que será interpolado
                Ex.:
                campo.codigo-cliente.obrigatorio=Informe o código do cliente.
        26.7.2. Nas entidades e DTOs, nas validações, chamar esta chave
                Ex.:
                @NotEmpty(message = "{campo.nome.obrigatorio}")
        26.7.3. Por fim, criar um arquivo em config, conforme InternacionalizacaoConfig
------------------------------------------------------------------------------------------------------------------------
                                    SPRING SECURITY
------------------------------------------------------------------------------------------------------------------------
27. Implementando segurança atráves do Spring Security
    27.1. Adicionar a dependência ao arquivo pom.xml. Só com isso já será OBRIGATÓRIO informar a senha para acesar a API
          Ex.:
          <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-security</artifactId>
          </dependency>
    27.2. Criar uma classe SecurityConfig em config, para ter TODA A CONFIGURAÇÃO do Spring Security.
        27.2.1. Colocar a anotação @EnableWebSecurity
        27.2.2. Extender WebSecurityConfigurerAdapter
        27.2.3. Implementar 3 métodos:
                @Override // Para autenticar
                protected void configure(AuthenticationManagerBuilder auth) throws Exception {
                    super.configure(auth);
                }

                @Override // Para autorizar
                protected void configure(HttpSecurity http) throws Exception {
                    super.configure(http);
                }

                @Bean // criptografar o password
                public PasswordEncoder passwordEncoder() {
                     return new BCryptPasswordEncoder(); // Gera uma hash com a senha criptografada
                }
        27.2.4. Configurando a autenticação em memória (porque estou usando um H2)
        27.2.5. No método void configure(HttpSecurity http) eu faço a definição das URLs que eu vou autorizar
                e também o tipo da autenticação, por exemplo por formulário ou básica.
    27.3. Fazendo a configuração para recuperar usuários de uma base de dados
        27.3.1. Criar a classe UserServiceImpl, anotar com @Service, implementar UserDetailsService e seu método
            27.3.1.1. Essa interface serve para recuperar usuários de uma base de dados
        27.3.2. Injetar este service UserServiceImpl em SecurityConfig e configurar o método void configure(AuthenticationManagerBuilder auth)
        27.3.3. Voltar na UserServiceImpl e no método criado, recuperar o usuário da base, seu perfil e criptografar a senha
    27.4. Implementando o cadastro de usuários
        27.4.1. Criar uma entidade Usuario, com as colunas necessárias para login e senha e fazer as anotações padrões de
                entidade (inclusive valições)  e p/ usar o Lombok
        27.4.2. Criar o repository, com o query methodo findByLogin()
        27.4.3. Injetar o repository na UserServiceImpl, no método: UserDetails loadUserByUsername(String username)
            27.4.4. Fazer o .build() do retorno do repository na entidade User. Obs: User implements UserDetails, CredentialsContainer
        27.4.4. Criar o método .save() para salvar o Usuario
        27.4.5. Criar o controller, colocar as anotações padrões @RestController, @RequestMapping() e @RequiredArgsConstructor
                para evitar a criação do construtor
            27.4.5.1. Injetar como final UsuarioServiceImpl. Final p/ poder usar a anotação @RequiredArgsConstructor do Lombok
        27.4.6. Criar o método p/ salvar o usuario
        27.4.7. Injetar o PasswordEncoder para criptografar a senha do usuário e salvar já criptografada na base
        27.4.8. Na controller, criar um método para recuperar o usuário pelo repository e fazer o build retornando um User
        DICA! https://www.baeldung.com/spring-security-authentication-with-a-database
    27.5. Implementação do JSON WEB TOKEN (JWT)
        27.5.1. Adicionar a dependência ao pom.xml
        27.5.2. Criar uma classe para gerar o token JwtService e anotar com o @Service e criar duas propriedades do tipo
                String: expiração e chave de assinatura
        27.5.3. No arquivo application.properties, fazer a definição da expiração e da chave de assinatura
        DICA! Acessei o site: https://www.base64encode.org e gerei um encode p/ a palavra palmeiras: cGFsbWVpcmFz
        27.5.4. Implementar o método que vai gerar o token para os usuários devidamente autenticados
            27.5.4.1. Este método precisa consturir builder() um Jwts
                      Ex.:
                      return Jwts
                                      .builder()
                                      .setSubject(usuario.getLogin())
                                      .setExpiration(data)
                                      .signWith(SignatureAlgorithm.HS512, chaveAssinatura)
                                      .compact();
        27.5.5. Obtendo os claims do token
    27.6. Implementar a classe JwtAuthFilter, conforme exemplo
    27.7. Atualizar a classe securityConfig
    27.8. Criar o endpoint na controller p/ autenticar o usuário e gerar o token
    RESUMO DA IMPLEMENTAÇÃO DO JWT
    - Criar a classe JwtService, que faz a codificação e decodificação do TOKEN
    - Depois a classe JwtAuthFilter para fazer a interceptação das requisições e obter o token do header, verificar se o token
      é válido, obter os dados dos usuários e colocar dentro do contexto
    - E por fim reconfiguramos a classe SecurityConfig para ele interceptar as requisições e colocar dentro do contexto
      do spring security
    - Implentar a controller para autenticar o usuário
------------------------------------------------------------------------------------------------------------------------
                                    MIGRANDO PARA O MySQL
------------------------------------------------------------------------------------------------------------------------
28. Fazendo a migração para o banco MySQL e deixando o H2 para testes
    28.1. Duplicar o arquivo application.properties e renomeá-lo como application-test.properties. O arquivo test será mantido
          como H2
    28.2. Alterar as propriedades do application.properties para fazer a conexão com o BD
    28.3. Alterar a estratégia de geração de sequence de @GeneratedValue(strategy = GenerationType.AUTO) para
          @GeneratedValue(strategy = GenerationType.IDENTITY)
    28.4. Criado o arquivo application.yml, onde eu defino entre outras coisas qual perfil está ativo.
          Ex.:
          active: test
------------------------------------------------------------------------------------------------------------------------
                                    Configurando o SWAGGER
------------------------------------------------------------------------------------------------------------------------

























